type CanisterCall = record {
  canister_id : principal;
  function_name : text;
  time_at: u64;
  caller: principal;
  params : text;
  result : blob;
};

type TestCaseView = record {
    tag: text;
    config: text;
    time_at: nat64;
    canister_calls: vec CanisterCall;
};

type CanisterConfig = record {
  canister_id : principal;
  time_updated: nat64;
  is_active : bool;
  is_public: bool;
  config: text;
  meta_data: vec text };

type UserConfigViewPrivate = record {
  users : vec principal;
  ui_config : text;
  calls_limit: nat32;
  canister_configs : vec CanisterConfig;
  canister_calls : vec CanisterCall;
};

type UserConfigViewPublic = record {
  users : vec principal;
  ui_config : text;
  canister_configs : vec CanisterConfig;
};

type CallResult = variant {
  Authenticated : text;
  UnAuthenticated: text;
};

type GetConfigResult = variant {
  Authenticated : UserConfigViewPrivate;
  UnAuthenticated: UserConfigViewPublic;
};

type GetCallResult = variant {
  Authenticated : vec CanisterCall;
  UnAuthenticated: text;
};

type GetTestResult = variant {
  Authenticated : vec TestCaseView;
  UnAuthenticated: text;
};

service devhub : {
  init : (principal, principal, nat32, text) -> ();
  add_user: (principal) -> (CallResult);
  cache_ui_config : (text) -> (CallResult);
  cache_canister_config : (CanisterConfig) -> (CallResult);
  cache_canister_calls : (vec CanisterCall) -> (CallResult);
  cache_test_case: (TestCaseView) -> (CallResult);
  get_user_config : () -> (GetConfigResult) query;
  get_canister_calls: (opt principal, opt text, opt nat16 ) -> (GetCallResult) query;
  get_test_cases: ( opt text, opt nat16, bool ) -> (GetTestResult) query;
  get_principal: () -> (principal) query;
  did_to_js: (text) -> (opt text) query;
}